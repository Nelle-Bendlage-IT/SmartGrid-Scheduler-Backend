// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: gsi_prediction.proto

package gsi_prediction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GSIPredictionServiceClient is the client API for GSIPredictionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GSIPredictionServiceClient interface {
	GetGSIPrediction(ctx context.Context, in *GetGSIPredictionsRequest, opts ...grpc.CallOption) (*GetGSIPredictionResponse, error)
}

type gSIPredictionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGSIPredictionServiceClient(cc grpc.ClientConnInterface) GSIPredictionServiceClient {
	return &gSIPredictionServiceClient{cc}
}

func (c *gSIPredictionServiceClient) GetGSIPrediction(ctx context.Context, in *GetGSIPredictionsRequest, opts ...grpc.CallOption) (*GetGSIPredictionResponse, error) {
	out := new(GetGSIPredictionResponse)
	err := c.cc.Invoke(ctx, "/gsi_predicition.GSIPredictionService/GetGSIPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GSIPredictionServiceServer is the server API for GSIPredictionService service.
// All implementations should embed UnimplementedGSIPredictionServiceServer
// for forward compatibility
type GSIPredictionServiceServer interface {
	GetGSIPrediction(context.Context, *GetGSIPredictionsRequest) (*GetGSIPredictionResponse, error)
}

// UnimplementedGSIPredictionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGSIPredictionServiceServer struct {
}

func (UnimplementedGSIPredictionServiceServer) GetGSIPrediction(context.Context, *GetGSIPredictionsRequest) (*GetGSIPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGSIPrediction not implemented")
}

// UnsafeGSIPredictionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GSIPredictionServiceServer will
// result in compilation errors.
type UnsafeGSIPredictionServiceServer interface {
	mustEmbedUnimplementedGSIPredictionServiceServer()
}

func RegisterGSIPredictionServiceServer(s grpc.ServiceRegistrar, srv GSIPredictionServiceServer) {
	s.RegisterService(&GSIPredictionService_ServiceDesc, srv)
}

func _GSIPredictionService_GetGSIPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGSIPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSIPredictionServiceServer).GetGSIPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gsi_predicition.GSIPredictionService/GetGSIPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSIPredictionServiceServer).GetGSIPrediction(ctx, req.(*GetGSIPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GSIPredictionService_ServiceDesc is the grpc.ServiceDesc for GSIPredictionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GSIPredictionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gsi_predicition.GSIPredictionService",
	HandlerType: (*GSIPredictionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGSIPrediction",
			Handler:    _GSIPredictionService_GetGSIPrediction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gsi_prediction.proto",
}
